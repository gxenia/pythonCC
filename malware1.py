def main():
    # Input
    n, m = list(map(int, input().split()))
    grid = []
    for i in range(n):
        row = list(input())
        grid.append(row)
    moves = []
    for move in range(m):
        sample_id, direction, rep = input().split()
        moves.append((sample_id, direction, rep))
    
    # @parameters - grid, each move
    # @return - type of the error
    errors = []
    for move in moves:
        errors.append(checkError(move, grid))
    
    # Print the results
    print(*errors, sep = '\n')
    for row in grid:
        print(*row, sep = "")
        
        
def checkError(move, grid):
    # 1: error: invalid number of repetitions (rep < 1)
    if int(move[2]) < 1: return "1"
    # 2: error: sample_id does not appear on the board
    position = exist(move[0], grid)
    if position == False: return "2"

    else:
        return moveSample(grid, position, move)
            
def exist(sample_id, grid):
    e = False
    for row in range(len(grid)):
        for coloumn in range(len(grid[row])):
            if grid[row][coloumn] == sample_id:
                return [row, coloumn]
    return e

def moveSample(grid, position, move):
    initial_position = tuple(position)
    
    # move = sample_ id, dir, rep
    if move[1] == "U":
        for i in range(int(move[2])):
            if position[0]-1 >= 0:
                if grid[position[0]-1][position[1]] == ".":
                    grid[position[0]-1][position[1]] = grid[position[0]][position[1]]
                    grid[position[0]][position[1]] = "."
                    position = [position[0]-1, position[1]]
                else: # 3: error: attempt to move the sample over a non-empty location
                    grid[position[0]][position[1]] = "."
                    grid[initial_position[0]][initial_position[1]] = move[0]
                    return "3"
            else: # 4: error: attempt to move the sample past the boardâ€™s boundaries
                grid[initial_position[0]][initial_position[1]] = move[0]
                grid[position[0]][position[1]] = "."
                return "4"
        
    elif move[1] == "D":
        for i in range(int(move[2])):
            if position[0]+1 < len(grid):
                if grid[position[0]+1][position[1]] == ".":
                    grid[position[0]+1][position[1]] = grid[position[0]][position[1]]
                    grid[position[0]][position[1]] = "."
                    position = [position[0]+1, position[1]]
                else:
                    grid[position[0]][position[1]] = "."
                    grid[initial_position[0]][initial_position[1]] = move[0]
                    return "3"
            else:
                grid[position[0]][position[1]] = "."
                grid[initial_position[0]][initial_position[1]] = move[0]
                return "4"
        
    elif move[1] == "R":
        for i in range(int(move[2])):
            if position[1]+1 < len(grid):
                if grid[position[0]][position[1]+1] == ".":
                    grid[position[0]][position[1]+1] = grid[position[0]][position[1]]
                    grid[position[0]][position[1]] = "."
                    position = [position[0], position[1]+1]
                else:
                    grid[position[0]][position[1]] = "."
                    grid[initial_position[0]][initial_position[1]] = move[0]
                    return "3"
            else:
                grid[position[0]][position[1]] = "."
                grid[initial_position[0]][initial_position[1]] = move[0]
                return "4"
        
    elif move[1] == "L":
        for i in range(int(move[2])):
            if position[1]-1 >= 0:
                if grid[position[0]][position[1]-1] == ".":
                    grid[position[0]][position[1]-1] = grid[position[0]][position[1]]
                    grid[position[0]][position[1]] = "."
                    position = [position[0], position[1]-1]
                else:
                    grid[position[0]][position[1]] = "."
                    grid[initial_position[0]][initial_position[1]] = move[0]
                    return "3"
            else:
                grid[position[0]][position[1]] = "."
                grid[initial_position[0]][initial_position[1]] = move[0]
                return "4"
    
    return "0"
            
main()